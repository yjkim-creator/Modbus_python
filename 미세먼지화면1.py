# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '미세먼지화면1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys 
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
from pyModbusTCP.client import ModbusClient
#from PyQt5.QtCore import QTime, QDate, pyqtSignal
from PyQt5.QtCore import *
import time
from datetime import date, timedelta
import mariadb
from threading import Thread, Lock
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import QApplication, QWidget

class Ui_MainWindow(object):
    
    uiUpdateDelegate = QtCore.pyqtSignal(int)

    #Select_data = ""
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1051, 555)
        MainWindow.setMaximumSize(QtCore.QSize(1049, 555))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1049, 555))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./image/e1d59fd7198c9265c4447a324f840365.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.centralwidget.setPalette(palette)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(160, 0, 881, 551))
        self.stackedWidget.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.stackedWidget.setAcceptDrops(False)
        #self.stackedWidget.setFrameShape(QtWidgets.QFrame.Box)
        self.stackedWidget.setFrameShadow(QtWidgets.QFrame.Plain)
        self.stackedWidget.setObjectName("stackedWidget")
        self.stackedWidget.setFrameShape(QtWidgets.QFrame.NoFrame)

        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.groupBox = QtWidgets.QGroupBox(self.page)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 281, 271))
        self.MsgBox = QtWidgets.QMessageBox()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_2.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_2.setObjectName("groupBox_2")
        self.Class1Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox)
        self.Class1Value_Pm25.setGeometry(QtCore.QRect(30, 80, 101, 41))
        self.Class1Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class1Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class1Value_Pm25.setObjectName("Class1Value_Pm25")
        self.Class1Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox)
        self.Class1Value_Pm10.setGeometry(QtCore.QRect(30, 160, 101, 41))
        self.Class1Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class1Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class1Value_Pm10.setObjectName("Class1Value_Pm10")
        self.Class1Status_Off = QtWidgets.QLabel(self.groupBox)
        self.Class1Status_Off.setGeometry(QtCore.QRect(90, 20, 61, 41))
        self.Class1Status_Off.setObjectName("Class1Status_Off")
        self.Class1Status_On = QtWidgets.QLabel(self.groupBox)
        self.Class1Status_On.setGeometry(QtCore.QRect(30, 20, 61, 41))
        self.Class1Status_On.setObjectName("Class1Status_On")
        self.Chk_Class1 = QtWidgets.QCheckBox(self.groupBox)
        self.Chk_Class1.setGeometry(QtCore.QRect(200, 30, 51, 51))
        self.Chk_Class1.setObjectName("Chk_Class1")
        self.label_18 = QtWidgets.QLabel(self.groupBox)
        self.label_18.setGeometry(QtCore.QRect(40, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.groupBox)
        self.label_19.setGeometry(QtCore.QRect(40, 200, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_19.setFont(font)
        self.label_19.setAlignment(QtCore.Qt.AlignCenter)
        self.label_19.setObjectName("label_19")
        self.Class1Alarm_PM25 = QtWidgets.QLabel(self.groupBox)
        self.Class1Alarm_PM25.setGeometry(QtCore.QRect(190, 80, 41, 71))
        self.Class1Alarm_PM25.setObjectName("Class1Alarm_PM25")
        self.Class1Alarm_PM10 = QtWidgets.QLabel(self.groupBox)
        self.Class1Alarm_PM10.setGeometry(QtCore.QRect(190, 150, 41, 71))
        self.Class1Alarm_PM10.setObjectName("Class1Alarm_PM10")
        self.groupBox_3 = QtWidgets.QGroupBox(self.page)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 280, 281, 271))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_3)
        self.groupBox_4.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_4.setObjectName("groupBox_4")
        self.Class4Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox_3)
        self.Class4Value_Pm25.setGeometry(QtCore.QRect(20, 80, 101, 41))
        self.Class4Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class4Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class4Value_Pm25.setObjectName("Class4Value_Pm25")
        self.Class4Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox_3)
        self.Class4Value_Pm10.setGeometry(QtCore.QRect(20, 150, 101, 41))
        self.Class4Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class4Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class4Value_Pm10.setObjectName("Class4Value_Pm10")
        self.Class4Status_Off = QtWidgets.QLabel(self.groupBox_3)
        self.Class4Status_Off.setGeometry(QtCore.QRect(90, 30, 61, 41))
        self.Class4Status_Off.setObjectName("Class4Status_Off")
        self.Class4Status_On = QtWidgets.QLabel(self.groupBox_3)
        self.Class4Status_On.setGeometry(QtCore.QRect(30, 30, 61, 41))
        self.Class4Status_On.setObjectName("Class4Status_On")
        self.Chk_Class4 = QtWidgets.QCheckBox(self.groupBox_3)
        self.Chk_Class4.setGeometry(QtCore.QRect(190, 40, 51, 51))
        self.Chk_Class4.setObjectName("Chk_Class4")
        self.label_24 = QtWidgets.QLabel(self.groupBox_3)
        self.label_24.setGeometry(QtCore.QRect(30, 190, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_24.setFont(font)
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.groupBox_3)
        self.label_25.setGeometry(QtCore.QRect(30, 120, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_25.setFont(font)
        self.label_25.setAlignment(QtCore.Qt.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.Class4Alarm_PM25 = QtWidgets.QLabel(self.groupBox_3)
        self.Class4Alarm_PM25.setGeometry(QtCore.QRect(190, 80, 41, 71))
        self.Class4Alarm_PM25.setObjectName("Class4Alarm_PM25")
        self.Class4Alarm_PM10 = QtWidgets.QLabel(self.groupBox_3)
        self.Class4Alarm_PM10.setGeometry(QtCore.QRect(190, 140, 41, 71))
        self.Class4Alarm_PM10.setObjectName("Class4Alarm_PM10")
        self.groupBox_5 = QtWidgets.QGroupBox(self.page)
        self.groupBox_5.setGeometry(QtCore.QRect(300, 10, 281, 271))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_6.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_6.setObjectName("groupBox_6")
        self.Class2Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox_5)
        self.Class2Value_Pm25.setGeometry(QtCore.QRect(40, 80, 101, 41))
        self.Class2Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class2Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class2Value_Pm25.setObjectName("Class2Value_Pm25")
        self.Class2Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox_5)
        self.Class2Value_Pm10.setGeometry(QtCore.QRect(40, 160, 101, 41))
        self.Class2Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class2Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class2Value_Pm10.setObjectName("Class2Value_Pm10")
        self.Class2Status_Off = QtWidgets.QLabel(self.groupBox_5)
        self.Class2Status_Off.setGeometry(QtCore.QRect(100, 20, 61, 41))
        self.Class2Status_Off.setObjectName("Class2Status_Off")
        self.Class2Status_On = QtWidgets.QLabel(self.groupBox_5)
        self.Class2Status_On.setGeometry(QtCore.QRect(30, 20, 61, 41))
        self.Class2Status_On.setObjectName("Class2Status_On")
        self.Chk_Class2 = QtWidgets.QCheckBox(self.groupBox_5)
        self.Chk_Class2.setGeometry(QtCore.QRect(210, 30, 51, 51))
        self.Chk_Class2.setObjectName("Chk_Class2")
        self.label_20 = QtWidgets.QLabel(self.groupBox_5)
        self.label_20.setGeometry(QtCore.QRect(50, 200, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_20.setFont(font)
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.groupBox_5)
        self.label_21.setGeometry(QtCore.QRect(50, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_21.setFont(font)
        self.label_21.setAlignment(QtCore.Qt.AlignCenter)
        self.label_21.setObjectName("label_21")
        self.Class2Alarm_PM25 = QtWidgets.QLabel(self.groupBox_5)
        self.Class2Alarm_PM25.setGeometry(QtCore.QRect(200, 80, 41, 71))
        self.Class2Alarm_PM25.setObjectName("Class2Alarm_PM25")
        self.Class2Alarm_PM10 = QtWidgets.QLabel(self.groupBox_5)
        self.Class2Alarm_PM10.setGeometry(QtCore.QRect(200, 150, 41, 71))
        self.Class2Alarm_PM10.setObjectName("Class2Alarm_PM10")
        self.groupBox_7 = QtWidgets.QGroupBox(self.page)
        self.groupBox_7.setGeometry(QtCore.QRect(300, 280, 281, 271))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setObjectName("groupBox_7")
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_8.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_8.setObjectName("groupBox_8")
        self.Class5Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox_7)
        self.Class5Value_Pm25.setGeometry(QtCore.QRect(50, 80, 101, 41))
        self.Class5Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class5Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class5Value_Pm25.setObjectName("Class5Value_Pm25")
        self.Class5Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox_7)
        self.Class5Value_Pm10.setGeometry(QtCore.QRect(50, 150, 101, 41))
        self.Class5Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class5Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class5Value_Pm10.setObjectName("Class5Value_Pm10")
        self.Class5Status_Off = QtWidgets.QLabel(self.groupBox_7)
        self.Class5Status_Off.setGeometry(QtCore.QRect(110, 30, 61, 41))
        self.Class5Status_Off.setObjectName("Class5Status_Off")
        self.Class5Status_On = QtWidgets.QLabel(self.groupBox_7)
        self.Class5Status_On.setGeometry(QtCore.QRect(30, 30, 61, 41))
        self.Class5Status_On.setObjectName("Class5Status_On")
        self.Chk_Class5 = QtWidgets.QCheckBox(self.groupBox_7)
        self.Chk_Class5.setGeometry(QtCore.QRect(200, 40, 51, 51))
        self.Chk_Class5.setObjectName("Chk_Class5")
        self.label_26 = QtWidgets.QLabel(self.groupBox_7)
        self.label_26.setGeometry(QtCore.QRect(70, 190, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_26.setFont(font)
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.groupBox_7)
        self.label_27.setGeometry(QtCore.QRect(60, 120, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_27.setFont(font)
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.Class5Alarm_PM25 = QtWidgets.QLabel(self.groupBox_7)
        self.Class5Alarm_PM25.setGeometry(QtCore.QRect(200, 80, 41, 71))
        self.Class5Alarm_PM25.setObjectName("Class5Alarm_PM25")
        self.Class5Alarm_PM10 = QtWidgets.QLabel(self.groupBox_7)
        self.Class5Alarm_PM10.setGeometry(QtCore.QRect(200, 140, 41, 71))
        self.Class5Alarm_PM10.setObjectName("Class5Alarm_PM10")
        self.groupBox_9 = QtWidgets.QGroupBox(self.page)
        self.groupBox_9.setGeometry(QtCore.QRect(590, 10, 281, 271))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_9.setFont(font)
        self.groupBox_9.setObjectName("groupBox_9")
        self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_9)
        self.groupBox_10.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_10.setObjectName("groupBox_10")
        self.Class3Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox_9)
        self.Class3Value_Pm25.setGeometry(QtCore.QRect(40, 80, 101, 41))
        self.Class3Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class3Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class3Value_Pm25.setObjectName("Class3Value_Pm25")
        self.Class3Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox_9)
        self.Class3Value_Pm10.setGeometry(QtCore.QRect(40, 160, 101, 41))
        self.Class3Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class3Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class3Value_Pm10.setObjectName("Class3Value_Pm10")
        self.Class3Status_Off = QtWidgets.QLabel(self.groupBox_9)
        self.Class3Status_Off.setGeometry(QtCore.QRect(100, 30, 61, 41))
        self.Class3Status_Off.setObjectName("Class3Status_Off")
        self.Class3Status_On = QtWidgets.QLabel(self.groupBox_9)
        self.Class3Status_On.setGeometry(QtCore.QRect(30, 30, 61, 41))
        self.Class3Status_On.setObjectName("Class3Status_On")
        self.Chk_Class3 = QtWidgets.QCheckBox(self.groupBox_9)
        self.Chk_Class3.setGeometry(QtCore.QRect(200, 30, 51, 51))
        self.Chk_Class3.setObjectName("Chk_Class3")
        self.label_22 = QtWidgets.QLabel(self.groupBox_9)
        self.label_22.setGeometry(QtCore.QRect(60, 200, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_22.setFont(font)
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.groupBox_9)
        self.label_23.setGeometry(QtCore.QRect(50, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_23.setFont(font)
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.Class3Alarm_PM25 = QtWidgets.QLabel(self.groupBox_9)
        self.Class3Alarm_PM25.setGeometry(QtCore.QRect(200, 70, 41, 71))
        self.Class3Alarm_PM25.setObjectName("Class3Alarm_PM25")
        self.Class3Alarm_PM10 = QtWidgets.QLabel(self.groupBox_9)
        self.Class3Alarm_PM10.setGeometry(QtCore.QRect(200, 140, 41, 71))
        self.Class3Alarm_PM10.setObjectName("Class3Alarm_PM10")
        self.groupBox_11 = QtWidgets.QGroupBox(self.page)
        self.groupBox_11.setGeometry(QtCore.QRect(590, 280, 281, 271))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_11.setFont(font)
        self.groupBox_11.setObjectName("groupBox_11")
        self.groupBox_12 = QtWidgets.QGroupBox(self.groupBox_11)
        self.groupBox_12.setGeometry(QtCore.QRect(280, 280, 281, 271))
        self.groupBox_12.setObjectName("groupBox_12")
        self.Class6Value_Pm25 = QtWidgets.QLCDNumber(self.groupBox_11)
        self.Class6Value_Pm25.setGeometry(QtCore.QRect(40, 80, 101, 41))
        self.Class6Value_Pm25.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class6Value_Pm25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class6Value_Pm25.setObjectName("Class6Value_Pm25")
        self.Class6Value_Pm10 = QtWidgets.QLCDNumber(self.groupBox_11)
        self.Class6Value_Pm10.setGeometry(QtCore.QRect(40, 150, 101, 41))
        self.Class6Value_Pm10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Class6Value_Pm10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Class6Value_Pm10.setObjectName("Class6Value_Pm10")
        self.Class6Status_Off = QtWidgets.QLabel(self.groupBox_11)
        self.Class6Status_Off.setGeometry(QtCore.QRect(100, 30, 61, 41))
        self.Class6Status_Off.setObjectName("Class6Status_Off")
        self.Class6Status_On = QtWidgets.QLabel(self.groupBox_11)
        self.Class6Status_On.setGeometry(QtCore.QRect(30, 30, 61, 41))
        self.Class6Status_On.setObjectName("Class6Status_On")
        self.Chk_Class6 = QtWidgets.QCheckBox(self.groupBox_11)
        self.Chk_Class6.setGeometry(QtCore.QRect(210, 40, 51, 51))
        self.Chk_Class6.setObjectName("Chk_Class6")
        self.label_28 = QtWidgets.QLabel(self.groupBox_11)
        self.label_28.setGeometry(QtCore.QRect(50, 190, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_28.setFont(font)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.groupBox_11)
        self.label_29.setGeometry(QtCore.QRect(50, 120, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_29.setFont(font)
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.Class6Alarm_PM25 = QtWidgets.QLabel(self.groupBox_11)
        self.Class6Alarm_PM25.setGeometry(QtCore.QRect(200, 80, 41, 71))
        self.Class6Alarm_PM25.setObjectName("Class6Alarm_PM25")
        self.Class6Alarm_PM10 = QtWidgets.QLabel(self.groupBox_11)
        self.Class6Alarm_PM10.setGeometry(QtCore.QRect(200, 140, 41, 71))
        self.Class6Alarm_PM10.setObjectName("Class6Alarm_PM10")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_3 = QtWidgets.QLabel(self.page_2)
        self.label_3.setGeometry(QtCore.QRect(0, 110, 71, 51))
        self.label_3.setObjectName("label_3")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.page_2)
        self.dateTimeEdit.setGeometry(QtCore.QRect(60, 120, 141, 22))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.dateTimeEdit.setDate(QDate.currentDate())
        self.dateTimeEdit.setCalendarPopup(True)
        self.label_6 = QtWidgets.QLabel(self.page_2)
        self.label_6.setGeometry(QtCore.QRect(200, 110, 55, 51))
        self.label_6.setObjectName("label_6")
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.page_2)
        self.dateTimeEdit_2.setGeometry(QtCore.QRect(260, 120, 141, 22))
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        
        QDataVar= QDate.currentDate()
        QDataVar = QDataVar.addDays(1)
        self.dateTimeEdit_2.setDate(QDataVar)
        self.dateTimeEdit_2.setCalendarPopup(True)        
        self.label_7 = QtWidgets.QLabel(self.page_2)
        self.label_7.setGeometry(QtCore.QRect(400, 110, 35, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.checkBox = QtWidgets.QCheckBox(self.page_2)
        self.checkBox.setGeometry(QtCore.QRect(440, 120, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setChecked(True)
        self.checkBox_2 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_2.setGeometry(QtCore.QRect(490, 100, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_3.setGeometry(QtCore.QRect(570, 100, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_4.setGeometry(QtCore.QRect(650, 100, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_4.setFont(font)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_5.setGeometry(QtCore.QRect(490, 120, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_5.setFont(font)
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_6 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_6.setGeometry(QtCore.QRect(570, 120, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_6.setFont(font)
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_7 = QtWidgets.QCheckBox(self.page_2)
        self.checkBox_7.setGeometry(QtCore.QRect(650, 120, 81, 31))
        self.checkBox_7.setObjectName("checkBox_7")
        self.pushButton = QtWidgets.QPushButton(self.page_2)
        self.pushButton.setGeometry(QtCore.QRect(730, 110, 31, 31))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./image/24-24-480ccc7d4faca7356ba35bf23d01d111.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(64, 64))
        self.pushButton.setFlat(True)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_save = QtWidgets.QPushButton(self.page_2)
        self.pushButton_save.setGeometry(QtCore.QRect(730, 400, 31, 31))
        self.pushButton_save.setAutoFillBackground(False)
        self.pushButton_save.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./image/32-32-5522ef02c3bcb2c8389eda0bbc2f4815.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_save.setIcon(icon2)
        self.pushButton_save.setIconSize(QtCore.QSize(64, 64))
        self.pushButton_save.setFlat(True)
        self.pushButton_save.setObjectName("pushButton")
        self.tableView_Search = QtWidgets.QTableWidget(self.page_2)
        self.tableView_Search.setGeometry(QtCore.QRect(20, 180, 481, 331))
        self.tableView_Search.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableView_Search.setObjectName("tableView_Search")
        self.tableView_Search_2 = QtWidgets.QTableWidget(self.page_2)
        self.tableView_Search_2.setGeometry(QtCore.QRect(510, 180, 340, 220))
        self.tableView_Search_2.setObjectName("tableView_Search_2")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.checkBox_8 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_8.setGeometry(QtCore.QRect(460, 60, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_8.setFont(font)
        self.checkBox_8.setObjectName("checkBox_8")
        self.checkBox_8.setChecked(True)
        self.label_8 = QtWidgets.QLabel(self.page_3)
        self.label_8.setGeometry(QtCore.QRect(20, 50, 71, 51))
        self.label_8.setObjectName("label_8")
        self.dateTimeEdit_3 = QtWidgets.QDateTimeEdit(self.page_3)
        self.dateTimeEdit_3.setGeometry(QtCore.QRect(80, 60, 141, 22))
        self.dateTimeEdit_3.setObjectName("dateTimeEdit_3")
        self.dateTimeEdit_3.setDate(QDate.currentDate())
        self.dateTimeEdit_3.setCalendarPopup(True)
        self.pushButton_2 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_2.setGeometry(QtCore.QRect(750, 50, 31, 31))
        self.pushButton_2.setAutoFillBackground(False)
        self.pushButton_2.setText("")        
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setIconSize(QtCore.QSize(64, 64))
        self.pushButton_2.setFlat(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.dateTimeEdit_4 = QtWidgets.QDateTimeEdit(self.page_3)
        self.dateTimeEdit_4.setGeometry(QtCore.QRect(280, 60, 141, 22))
        self.dateTimeEdit_4.setObjectName("dateTimeEdit_4")
        QDataVar= QDate.currentDate()
        QDataVar = QDataVar.addDays(1)
        self.dateTimeEdit_4.setDate(QDataVar)
        #self.dateTimeEdit_4.setDate(QDate.currentDate())
        self.dateTimeEdit_4.setCalendarPopup(True)
        self.checkBox_9 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_9.setGeometry(QtCore.QRect(510, 40, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_9.setFont(font)
        self.checkBox_9.setObjectName("checkBox_9")
        self.checkBox_10 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_10.setGeometry(QtCore.QRect(590, 40, 81, 31))
        self.checkBox_10.setObjectName("checkBox_10")
        self.label_9 = QtWidgets.QLabel(self.page_3)
        self.label_9.setGeometry(QtCore.QRect(420, 50, 35, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.checkBox_11 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_11.setGeometry(QtCore.QRect(670, 40, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_11.setFont(font)
        self.checkBox_11.setObjectName("checkBox_11")
        self.checkBox_12 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_12.setGeometry(QtCore.QRect(510, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_12.setFont(font)
        self.checkBox_12.setObjectName("checkBox_12")
        self.checkBox_13 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_13.setGeometry(QtCore.QRect(590, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_13.setFont(font)
        self.checkBox_13.setObjectName("checkBox_13")
        self.checkBox_14 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_14.setGeometry(QtCore.QRect(670, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_14.setFont(font)
        self.checkBox_14.setObjectName("checkBox_14")
        self.label_10 = QtWidgets.QLabel(self.page_3)
        self.label_10.setGeometry(QtCore.QRect(220, 50, 55, 51))
        self.label_10.setObjectName("label_10")
        self.tableView_Search_3 = QtWidgets.QTableWidget(self.page_3)
        self.tableView_Search_3.setGeometry(QtCore.QRect(20, 100, 841, 431))
        self.tableView_Search_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableView_Search_3.setObjectName("tableView_Search_3")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_3.setGeometry(QtCore.QRect(620, 10, 71, 61))
        self.pushButton_3.setAutoFillBackground(False)
        self.pushButton_3.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./image/정지1.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon2)
        self.pushButton_3.setIconSize(QtCore.QSize(64, 64))
        self.pushButton_3.setFlat(True)
        self.pushButton_3.setObjectName("pushButton_3")
        self.checkBox_15 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_15.setGeometry(QtCore.QRect(360, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_15.setFont(font)
        self.checkBox_15.setObjectName("checkBox_15")
        self.checkBox_16 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_16.setGeometry(QtCore.QRect(200, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_16.setFont(font)
        self.checkBox_16.setObjectName("checkBox_16")
        self.checkBox_17 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_17.setGeometry(QtCore.QRect(120, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_17.setFont(font)
        self.checkBox_17.setObjectName("checkBox_17")
        self.checkBox_18 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_18.setGeometry(QtCore.QRect(440, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_18.setFont(font)
        self.checkBox_18.setObjectName("checkBox_18")
        self.checkBox_19 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_19.setGeometry(QtCore.QRect(280, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_19.setFont(font)
        self.checkBox_19.setObjectName("checkBox_19")
        self.checkBox_20 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_20.setGeometry(QtCore.QRect(520, 30, 81, 31))
        self.checkBox_20.setObjectName("checkBox_20")
        self.checkBox_21 = QtWidgets.QCheckBox(self.page_4)
        self.checkBox_21.setGeometry(QtCore.QRect(60, 30, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.checkBox_21.setFont(font)
        self.checkBox_21.setObjectName("checkBox_21")
        self.checkBox_21.setChecked(True)
        #self.graphicsView = QtWidgets.QGraphicsView(self.page_4)
        self.graphicsView = pg.PlotWidget(self.page_4, title="초미세먼지", 
                                          labels={'left': 'y축'},
                                          axisItems={'bottom': TimeAxisItem(orientation='bottom')})

        self.graphicsView.setGeometry(QtCore.QRect(0, 60, 881, 241))
        self.graphicsView.setObjectName("graphicsView")

        #self.graphicsView_2 = pg.PlotWidget(self.page_4)
        self.graphicsView_2 = pg.PlotWidget(self.page_4, title="미세먼지", 
                                labels={'left': 'y축'},
                                axisItems={'bottom': TimeAxisItem(orientation='bottom')})
        self.graphicsView_2.setGeometry(QtCore.QRect(0, 300, 881, 241))
        self.graphicsView_2.setObjectName("graphicsView_2")
     
        self.stackedWidget.addWidget(self.page_4)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(10, 0, 151, 161))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setLineWidth(0)
        self.label.setObjectName("label")
        self.pushButton_monitoring = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_monitoring.setGeometry(QtCore.QRect(0, 160, 160, 80))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.pushButton_monitoring.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_monitoring.setFont(font)
        self.pushButton_monitoring.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_monitoring.setAutoFillBackground(True)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./image/32-32-8caf69d03ee7f3d69aa78e748b92d9c1-home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_monitoring.setIcon(icon3)
        self.pushButton_monitoring.setIconSize(QtCore.QSize(32, 32))
        self.pushButton_monitoring.setCheckable(False)
        self.pushButton_monitoring.setAutoDefault(False)
        #self.pushButton_monitoring.setFlat(True)
        self.pushButton_monitoring.setObjectName("pushButton_monitoring")
        self.pushButton_search = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_search.setGeometry(QtCore.QRect(0, 240, 160, 80))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_search.setPalette(palette)
        self.pushButton_search.setFont(font)
        self.pushButton_search.setAutoFillBackground(True)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./image/32-32-a863ec6ac94dc989bb50978747f97f28-search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_search.setIcon(icon4)
        self.pushButton_search.setIconSize(QtCore.QSize(32, 32))
        #self.pushButton_search.setFlat(True)
        self.pushButton_search.setObjectName("pushButton_search")
        self.pushButton_alarm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_alarm.setGeometry(QtCore.QRect(0, 320, 160, 80))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_alarm.setPalette(palette)
        self.pushButton_alarm.setFont(font)
        self.pushButton_alarm.setAutoFillBackground(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./image/32-32-d126274718a0e884768ab345d31b53c0-alert.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_alarm.setIcon(icon5)
        self.pushButton_alarm.setIconSize(QtCore.QSize(32, 32))
        #self.pushButton_alarm.setFlat(True)
        self.pushButton_alarm.setObjectName("pushButton_alarm")
        self.pushButton_chart = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_chart.setGeometry(QtCore.QRect(0, 400, 160, 80))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_chart.setPalette(palette)
        self.pushButton_chart.setFont(font)
        self.pushButton_chart.setAutoFillBackground(True)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("./image/32-32-505f97271643e5432ab6119e2001c4a5-monitoring.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_chart.setIcon(icon6)
        self.pushButton_chart.setIconSize(QtCore.QSize(32, 32))
        #self.pushButton_chart.setFlat(True)
        self.pushButton_chart.setObjectName("pushButton_chart")
        self.pushButton_exit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_exit.setGeometry(QtCore.QRect(0, 479, 160, 81))
        font = QtGui.QFont()
        font.setFamily("Algerian")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_exit.setPalette(palette)
        self.pushButton_exit.setFont(font)
        self.pushButton_exit.setAutoFillBackground(True)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("./image/fb707410a020d77346fcd2dc2f6cc93e-cross.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_exit.setIcon(icon7)
        self.pushButton_exit.setIconSize(QtCore.QSize(32, 32))
        #self.pushButton_exit.setFlat(True)
        self.pushButton_exit.setObjectName("pushButton_exit")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)

        #self.pushButton.clicked.connect(self.pushButton.click)
        self.pushButton.clicked.connect(self.Datasearch_ButtonClicked)
        self.pushButton_monitoring.clicked.connect(self.Monitoring_buttonClicked)
        self.pushButton_search.clicked.connect(self.Search_buttonClicked)
        self.pushButton_alarm.clicked.connect(self.Alarm_buttonClicked)
        self.pushButton_chart.clicked.connect(self.Chart_buttonClicked)
        self.pushButton_exit.clicked.connect(self.Exit_buttonClicked)
        self.pushButton_save.clicked.connect(self.config_save)

        self.checkBox_2.clicked.connect(self.Search_checkBoxReset_1)
        self.checkBox_3.clicked.connect(self.Search_checkBoxReset_2)
        self.checkBox_4.clicked.connect(self.Search_checkBoxReset_3)
        self.checkBox_5.clicked.connect(self.Search_checkBoxReset_4)
        self.checkBox.clicked.connect(self.Search_checkBoxReset_All)
        self.checkBox_6.clicked.connect(self.Search_checkBoxReset_5)
        self.checkBox_7.clicked.connect(self.Search_checkBoxReset_6)

        self.Chk_Class1.clicked['bool'].connect(self.Chk_Class1.setChecked)
        self.Chk_Class2.clicked['bool'].connect(self.Chk_Class2.setChecked)
        self.Chk_Class3.clicked['bool'].connect(self.Chk_Class3.setChecked)
        self.Chk_Class4.clicked['bool'].connect(self.Chk_Class4.setChecked)
        self.Chk_Class5.clicked['bool'].connect(self.Chk_Class5.setChecked)
        self.Chk_Class6.clicked['bool'].connect(self.Chk_Class6.setChecked)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_2.clicked.connect(self.Alarmsearch_ButtonClicked)
        self.checkBox_8.clicked.connect(self.Alarm_checkBoxReset_All)
        self.checkBox_9.clicked.connect(self.Alarm_checkBoxReset_1)
        self.checkBox_10.clicked.connect(self.Alarm_checkBoxReset_2)
        self.checkBox_11.clicked.connect(self.Alarm_checkBoxReset_3)
        self.checkBox_12.clicked.connect(self.Alarm_checkBoxReset_4)
        self.checkBox_13.clicked.connect(self.Alarm_checkBoxReset_5)
        self.checkBox_14.clicked.connect(self.Alarm_checkBoxReset_6)

        self.checkBox_21.clicked.connect(self.Chart_checkBoxReset_All)
        self.checkBox_17.clicked.connect(self.Chart_checkBoxReset_1)
        self.checkBox_16.clicked.connect(self.Chart_checkBoxReset_2)
        self.checkBox_19.clicked.connect(self.Chart_checkBoxReset_3)
        self.checkBox_15.clicked.connect(self.Chart_checkBoxReset_4)
        self.checkBox_18.clicked.connect(self.Chart_checkBoxReset_5)
        self.checkBox_20.clicked.connect(self.Chart_checkBoxReset_6)

        self.pushButton_3.clicked.connect(self.Button_Push_Pause)   
    def config_save(self):

        MysqlClass.DB_Insert_Config()
        
        #alarm_config[0][1] = self.tableView_Search_2.item(0,0).text()
        for i in range(6):
            data1 = self.tableView_Search_2.item(int(i),1).text()
            data2 = self.tableView_Search_2.item(int(i),2).text()
            alarm_config[int(i)] = (int(data1), int(data2))        
    def Search_checkBoxReset_All(self):

        if self.checkBox.isChecked() == True:
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)      
    def Search_checkBoxReset_1(self):

        if self.checkBox_2.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Search_checkBoxReset_2(self):

        if self.checkBox_3.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Search_checkBoxReset_3(self):

        if self.checkBox_4.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Search_checkBoxReset_4(self):

        if self.checkBox_5.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Search_checkBoxReset_5(self):

        if self.checkBox_6.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Search_checkBoxReset_6(self):

        if self.checkBox_7.isChecked() == True:            
            self.checkBox.setChecked(False)
            

        if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True and self.checkBox_4.isChecked() == True and self.checkBox_5.isChecked() == True and self.checkBox_6.isChecked() == True and self.checkBox_7.isChecked() == True:
        
            self.checkBox.setChecked(True)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.checkBox_4.setChecked(False)
            self.checkBox_5.setChecked(False)
            self.checkBox_6.setChecked(False)
            self.checkBox_7.setChecked(False)
    def Alarm_checkBoxReset_All(self):

        if self.checkBox_8.isChecked() == True:
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)      
    def Alarm_checkBoxReset_1(self):

        if self.checkBox_9.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Alarm_checkBoxReset_2(self):

        if self.checkBox_10.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Alarm_checkBoxReset_3(self):

        if self.checkBox_11.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Alarm_checkBoxReset_4(self):

        if self.checkBox_12.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Alarm_checkBoxReset_5(self):

        if self.checkBox_13.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Alarm_checkBoxReset_6(self):       
        if self.checkBox_14.isChecked() == True:            
            self.checkBox_8.setChecked(False)
            

        if self.checkBox_9.isChecked() == True and self.checkBox_10.isChecked() == True and self.checkBox_11.isChecked() == True and self.checkBox_12.isChecked() == True and self.checkBox_13.isChecked() == True and self.checkBox_14.isChecked() == True:
        
            self.checkBox_8.setChecked(True)
            self.checkBox_9.setChecked(False)
            self.checkBox_10.setChecked(False)
            self.checkBox_11.setChecked(False)
            self.checkBox_12.setChecked(False)
            self.checkBox_13.setChecked(False)
            self.checkBox_14.setChecked(False)
    def Chart_checkBoxReset_All(self):

        if self.checkBox_21.isChecked() == True:
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)      
    def Chart_checkBoxReset_1(self):

        if self.checkBox_17.isChecked() == True:            
            self.checkBox_21.setChecked(False)
            

        if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def Chart_checkBoxReset_2(self):
        if self.checkBox_16.isChecked() == True:            
            self.checkBox_21.setChecked(False)
            

        if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def Chart_checkBoxReset_3(self):

       if self.checkBox_19.isChecked() == True:            
            self.checkBox_21.setChecked(False)            

       if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def Chart_checkBoxReset_4(self):

       if self.checkBox_15.isChecked() == True:            
            self.checkBox_21.setChecked(False)            

       if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def Chart_checkBoxReset_5(self):

       if self.checkBox_18.isChecked() == True:            
            self.checkBox_21.setChecked(False)            

       if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def Chart_checkBoxReset_6(self):       

       if self.checkBox_20.isChecked() == True:            
            self.checkBox_21.setChecked(False)            

       if self.checkBox_15.isChecked() == True and self.checkBox_16.isChecked() == True and self.checkBox_17.isChecked() == True and self.checkBox_18.isChecked() == True and self.checkBox_19.isChecked() == True and self.checkBox_20.isChecked() == True:
        
            self.checkBox_21.setChecked(True)
            self.checkBox_15.setChecked(False)
            self.checkBox_16.setChecked(False)
            self.checkBox_17.setChecked(False)
            self.checkBox_18.setChecked(False)
            self.checkBox_19.setChecked(False)
            self.checkBox_20.setChecked(False)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "미세먼지 모니터링 시스템"))
        self.groupBox.setTitle(_translate("MainWindow", "CLASS1"))
        self.groupBox_2.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class1Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class1Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class1.setText(_translate("MainWindow", "사용"))
        self.label_18.setText(_translate("MainWindow", "초미세먼지"))
        self.label_19.setText(_translate("MainWindow", "미세먼지"))
        self.Class1Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class1Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.groupBox_3.setTitle(_translate("MainWindow", "CLASS4"))
        self.groupBox_4.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class4Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class4Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class4.setText(_translate("MainWindow", "사용"))
        self.label_24.setText(_translate("MainWindow", "미세먼지"))
        self.label_25.setText(_translate("MainWindow", "초미세먼지"))
        self.Class4Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class4Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.groupBox_5.setTitle(_translate("MainWindow", "CLASS2"))
        self.groupBox_6.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class2Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class2Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class2.setText(_translate("MainWindow", "사용"))
        self.label_20.setText(_translate("MainWindow", "미세먼지"))
        self.label_21.setText(_translate("MainWindow", "초미세먼지"))
        self.Class2Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class2Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.groupBox_7.setTitle(_translate("MainWindow", "CLASS5"))
        self.groupBox_8.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class5Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class5Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class5.setText(_translate("MainWindow", "사용"))
        self.label_26.setText(_translate("MainWindow", "미세먼지"))
        self.label_27.setText(_translate("MainWindow", "초미세먼지"))
        self.Class5Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class5Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.groupBox_9.setTitle(_translate("MainWindow", "CLASS3"))
        self.groupBox_10.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class3Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class3Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class3.setText(_translate("MainWindow", "사용"))
        self.label_22.setText(_translate("MainWindow", "미세먼지"))
        self.label_23.setText(_translate("MainWindow", "초미세먼지"))
        self.Class3Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class3Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.groupBox_11.setTitle(_translate("MainWindow", "CLASS6"))
        self.groupBox_12.setTitle(_translate("MainWindow", "GroupBox"))
        self.Class6Status_Off.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/OFF.PNG\"/></p></body></html>"))
        self.Class6Status_On.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/ON.PNG\"/></p></body></html>"))
        self.Chk_Class6.setText(_translate("MainWindow", "사용"))
        self.label_28.setText(_translate("MainWindow", "미세먼지"))
        self.label_29.setText(_translate("MainWindow", "초미세먼지"))
        self.Class6Alarm_PM25.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.Class6Alarm_PM10.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/32-32-17554e7753e4b872fb352a7956511f04.png\"/></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "시작시간 :"))
        self.label_6.setText(_translate("MainWindow", "종료시간 :"))
        self.label_7.setText(_translate("MainWindow", "교실 :"))
        self.checkBox.setText(_translate("MainWindow", "모두"))
        self.checkBox_2.setText(_translate("MainWindow", "CLASS1"))
        self.checkBox_3.setText(_translate("MainWindow", "CLASS2"))
        self.checkBox_4.setText(_translate("MainWindow", "CLASS3"))
        self.checkBox_5.setText(_translate("MainWindow", "CLASS4"))
        self.checkBox_6.setText(_translate("MainWindow", "CLASS5"))
        self.checkBox_7.setText(_translate("MainWindow", "CLASS6"))
        self.checkBox_8.setText(_translate("MainWindow", "모두"))
        self.label_8.setText(_translate("MainWindow", "시작시간 :"))
        self.checkBox_9.setText(_translate("MainWindow", "CLASS1"))
        self.checkBox_10.setText(_translate("MainWindow", "CLASS2"))
        self.label_9.setText(_translate("MainWindow", "교실 :"))
        self.checkBox_11.setText(_translate("MainWindow", "CLASS3"))
        self.checkBox_12.setText(_translate("MainWindow", "CLASS4"))
        self.checkBox_13.setText(_translate("MainWindow", "CLASS5"))
        self.checkBox_14.setText(_translate("MainWindow", "CLASS6"))
        self.label_10.setText(_translate("MainWindow", "종료시간 :"))
        self.checkBox_15.setText(_translate("MainWindow", "CLASS4"))
        self.checkBox_16.setText(_translate("MainWindow", "CLASS2"))
        self.checkBox_17.setText(_translate("MainWindow", "CLASS1"))
        self.checkBox_18.setText(_translate("MainWindow", "CLASS5"))
        self.checkBox_19.setText(_translate("MainWindow", "CLASS3"))
        self.checkBox_20.setText(_translate("MainWindow", "CLASS6"))
        self.checkBox_21.setText(_translate("MainWindow", "모두"))
        #self.label_30.setText(_translate("MainWindow", "초미세먼지"))
        #self.label_31.setText(_translate("MainWindow", "미세먼지"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><img src=\"./image/128-128-06e6cb478c22a55311bc0329524be75d.png\"/></p></body></html>"))
        self.pushButton_monitoring.setText(_translate("MainWindow", "모니터링"))
        self.pushButton_search.setText(_translate("MainWindow", "데이터 관리"))
        self.pushButton_alarm.setText(_translate("MainWindow", "알람 조회"))
        self.pushButton_chart.setText(_translate("MainWindow", "실시간 차트"))
        self.pushButton_exit.setText(_translate("MainWindow", "종료"))

        #button color
        self.pushButton_monitoring.setStyleSheet('background-color:red')
        self.pushButton_search.setStyleSheet('background-color:black')
        self.pushButton_alarm.setStyleSheet('background-color:black')
        self.pushButton_chart.setStyleSheet('background-color:black')
        self.pushButton_exit.setStyleSheet('background-color:black')

        self.centralwidget.setStyleSheet('background-color:rgb(112, 128, 144)')  
    def Monitoring_buttonClicked(self): 
        self.stackedWidget.setCurrentIndex(0)
        self.Button_Reset()
        self.pushButton_monitoring.setStyleSheet('background-color:red')        
    def Search_buttonClicked(self): 
        self.stackedWidget.setCurrentIndex(1)
        self.Button_Reset()
        self.pushButton_search.setStyleSheet('background-color:red')
    def Alarm_buttonClicked(self): 
        self.stackedWidget.setCurrentIndex(2)
        self.Button_Reset()
        self.pushButton_alarm.setStyleSheet('background-color:red')
    def Chart_buttonClicked(self): 
        self.stackedWidget.setCurrentIndex(3)
        self.Button_Reset()
        self.pushButton_chart.setStyleSheet('background-color:red')
    def Exit_buttonClicked(self): 
        self.Button_Reset()
        sys.exit()
    def Button_Reset(self):
        self.pushButton_monitoring.setStyleSheet('background-color:black')
        self.pushButton_search.setStyleSheet('background-color:black')
        self.pushButton_alarm.setStyleSheet('background-color:black')
        self.pushButton_chart.setStyleSheet('background-color:black')
    def Read_Register(self):
        
        from pyModbusTCP.client import ModbusClient
        import time
        from threading import Thread, Lock
        
        SERVER_HOST = "localhost"
        SERVER_PORT = 502

# set global
        
# init a thread lock
        regs_lock = Lock()

# modbus polling thread
        def polling_thread():
            global regs_PM25
            c = ModbusClient(host=SERVER_HOST, port=SERVER_PORT)
        # polling loop
            while True:
            # keep TCP open
                if not c.is_open():
                    c.open()
                    self.Status_Change(False)
                    regs_PM25 = []
            # do modbus reading on socket

                reg_list = c.read_holding_registers(0,20)
            # if read is ok, store result in regs (with thread lock synchronization)
                if reg_list:
                    with regs_lock:
                        regs_PM25 = reg_list
                        self.Class1Value_Pm25.display(regs_PM25[0])
                        self.Class2Value_Pm25.display(regs_PM25[2])
                        self.Class3Value_Pm25.display(regs_PM25[4])
                        self.Class4Value_Pm25.display(regs_PM25[6])
                        self.Class5Value_Pm25.display(regs_PM25[8])
                        self.Class6Value_Pm25.display(regs_PM25[10])
                        self.Status_Change(True)

                        
            # 1s before next polling
                time.sleep(1)

# start polling thread
        tp = Thread(target=polling_thread)
        # set daemon: polling thread will exit if main thread exit
        tp.daemon = True
        tp.start()
    def Status_Change(self, b_bool):
        if b_bool == True:
            self.Class1Status_Off.setVisible(False)
            self.Class2Status_Off.setVisible(False)
            self.Class3Status_Off.setVisible(False)
            self.Class4Status_Off.setVisible(False)
            self.Class5Status_Off.setVisible(False)
            self.Class6Status_Off.setVisible(False)

            self.Class1Status_On.setVisible(True)
            self.Class2Status_On.setVisible(True)
            self.Class3Status_On.setVisible(True)
            self.Class4Status_On.setVisible(True)
            self.Class5Status_On.setVisible(True)
            self.Class6Status_On.setVisible(True)
        else:
            self.Class1Status_On.setVisible(False)
            self.Class2Status_On.setVisible(False)
            self.Class3Status_On.setVisible(False)
            self.Class4Status_On.setVisible(False)
            self.Class5Status_On.setVisible(False)
            self.Class6Status_On.setVisible(False)

            self.Class1Status_Off.setVisible(True)
            self.Class2Status_Off.setVisible(True)
            self.Class3Status_Off.setVisible(True)
            self.Class4Status_Off.setVisible(True)
            self.Class5Status_Off.setVisible(True)
            self.Class6Status_Off.setVisible(True)
    def StatusOff(self):
        self.Class1Status_On.setVisible(False)
        self.Class2Status_On.setVisible(False)
        self.Class3Status_On.setVisible(False)
        self.Class4Status_On.setVisible(False)
        self.Class5Status_On.setVisible(False)
        self.Class6Status_On.setVisible(False)

        self.Class1Status_Off.setVisible(True)
        self.Class2Status_Off.setVisible(True)
        self.Class3Status_Off.setVisible(True)
        self.Class4Status_Off.setVisible(True)
        self.Class5Status_Off.setVisible(True)
        self.Class6Status_Off.setVisible(True)
    def Read_Register_PM10(self):
        
        from pyModbusTCP.client import ModbusClient
        import time
        from threading import Thread, Lock

        SERVER_HOST = "localhost"
        SERVER_PORT = 502

# set global

# init a thread lock
        regs_lock = Lock()

# modbus polling thread
        def polling_thread():
            global regs_PM10  
            c = ModbusClient(host=SERVER_HOST, port=SERVER_PORT)
        # polling loop
            while True:
            # keep TCP open
                if not c.is_open():
                    c.open()
                    self.Status_Change(False)
                    regs_PM10 = []
            # do modbus reading on socket
                reg_list = c.read_holding_registers(100,20)
            # if read is ok, store result in regs (with thread lock synchronization)
                if reg_list:
                    with regs_lock:
                        regs_PM10 = reg_list
                        self.Class1Value_Pm10.display(regs_PM10[0])
                        self.Class2Value_Pm10.display(regs_PM10[2])
                        self.Class3Value_Pm10.display(regs_PM10[4])
                        self.Class4Value_Pm10.display(regs_PM10[6])
                        self.Class5Value_Pm10.display(regs_PM10[8])
                        self.Class6Value_Pm10.display(regs_PM10[10])

                        self.Status_Change(True)

            # 1s before next polling
                time.sleep(1)

# start polling thread
        tp = Thread(target=polling_thread)
        # set daemon: polling thread will exit if main thread exit
        tp.daemon = True
        tp.start()
    def Thread_DB_Inset(self):
        import time
        while True:
            time.sleep(1)
            if MysqlClass.DB_Insert(MysqlClass) == False:
                MysqlClass.DB_Insert(MysqlClass)           #time.sleep(1)
    def Button_Push_Pause(self):
        if mytimer.isActive():
            mytimer.stop()
        else:
            mytimer.start(1000) # 1초마다 갱신 위함... 
            mytimer.timeout.connect(get_data)
    def Datasearch_ButtonClicked(self):

        if self.checkBox.isChecked() == False and self.checkBox_2.isChecked() == False and self.checkBox_3.isChecked() == False and self.checkBox_4.isChecked() == False and self.checkBox_5.isChecked() == False and self.checkBox_6.isChecked() == False and self.checkBox_7.isChecked() == False:
            self.MsgBox.setText("선택된 교실이 없습니다.")
            self.MsgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.MsgBox.exec()
            return
            
        sSelectText =""
        n_DiffYear = int(self.dateTimeEdit_2.dateTime().toString("yy")) - int(self.dateTimeEdit.dateTime().toString("yy"))
        n_DiffMonth = 0
        if n_DiffYear == 1:
            n_DiffMonth = int(self.dateTimeEdit_2.dateTime().toString("MM"))+12 - int(self.dateTimeEdit.dateTime().toString("MM"))
        else:
           n_DiffMonth = int(self.dateTimeEdit_2.dateTime().toString("MM")) - int(self.dateTimeEdit.dateTime().toString("MM"))

        if n_DiffMonth < 0:
            self.MsgBox.setText("시작 시간이 종료시간 보다 뒤에 있습니다.")
            self.MsgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.MsgBox.exec()
            return
        
        nextDt0 = self.dateTimeEdit.dateTime()

        for i in range(n_DiffMonth+1):
            sSelectText += "SELECT * FROM SENSOR_DATA_" + nextDt0.toString("yy_MM") + " UNION ALL "
            nextDt0 = nextDt0.addMonths(1)

        sSelectText = sSelectText.rstrip("UNION ALL")
        sSelectText += " WHERE REGDATE >= '" + self.dateTimeEdit.dateTime().toString("yyyy-MM-dd HH-mm-ss") + "' AND REGDATE <= '" + self.dateTimeEdit_2.dateTime().toString("yyyy-MM-dd HH-mm-ss") + "'"
        if self.checkBox.isChecked() == False:
            sSelectText += " AND ("
            if self.checkBox_2.isChecked() == True: 
                sSelectText += "class = 1 OR "
            if self.checkBox_3.isChecked(): sSelectText += "class = 2 OR "
            if self.checkBox_4.isChecked() == True:  sSelectText += "class = 3 OR "
            if self.checkBox_5.isChecked() == True:  sSelectText += "class = 4 OR "
            if self.checkBox_6.isChecked() == True:  sSelectText += "class = 5 OR "
            if self.checkBox_7.isChecked() == True:  sSelectText += "class = 6 OR"       
            sSelectText = sSelectText.rstrip(" ")       
            sSelectText = sSelectText.rstrip("OR")        
            sSelectText += ")"
        else:
            sSelectText += "OR"
            sSelectText = sSelectText.rstrip("OR")

        sSelectText += " order by REGDATE DESC "
        sSelectText += "limit 1000 "           

        MysqlClass.DB_Select(MysqlClass, sSelectText)

        count = len(Select_data)
    
        #갯수만큼 테이블의 Row를 생성한다.
        self.tableView_Search.setRowCount(count)
    
        #row 리스트만큼 반복하며 Table에 DB 값을 넣는다.
        for x in range(count):
            #리스트 내부의 column쌍은 튜플로 반환하므로 튜플의 각 값을 변수에 저장
            idx, className, regtime, pm25, pm10 = Select_data[x]
           
            #테이블의 각 셀에 값 입력
            self.tableView_Search.setItem(x, 0, QtWidgets.QTableWidgetItem(str(regtime)))
            self.tableView_Search.setItem(x, 1, QtWidgets.QTableWidgetItem(str(className)))
            self.tableView_Search.setItem(x, 2, QtWidgets.QTableWidgetItem(str(pm25)))
            self.tableView_Search.setItem(x, 3, QtWidgets.QTableWidgetItem(str(pm10)))
    def Alarmsearch_ButtonClicked(self):

        if self.checkBox_8.isChecked() == False and self.checkBox_9.isChecked() == False and self.checkBox_10.isChecked() == False and self.checkBox_11.isChecked() == False and self.checkBox_12.isChecked() == False and self.checkBox_13.isChecked() == False and self.checkBox_14.isChecked() == False:
            self.MsgBox.setText("선택된 교실이 없습니다.")
            self.MsgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.MsgBox.exec()
            return
            
        sSelectText =""
        n_DiffYear = int(self.dateTimeEdit_4.dateTime().toString("yy")) - int(self.dateTimeEdit_3.dateTime().toString("yy"))
        n_DiffMonth = 0
        if n_DiffYear == 1:
            n_DiffMonth = int(self.dateTimeEdit_4.dateTime().toString("MM"))+12 - int(self.dateTimeEdit_3.dateTime().toString("MM"))
        else:
           n_DiffMonth = int(self.dateTimeEdit_4.dateTime().toString("MM")) - int(self.dateTimeEdit_3.dateTime().toString("MM"))

        if n_DiffMonth < 0:
            self.MsgBox.setText("시작 시간이 종료시간 보다 뒤에 있습니다.")
            self.MsgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            self.MsgBox.exec()
            return

        sSelectText = "SELECT * FROM ALARM_LIST WHERE REGDATE >= '" + self.dateTimeEdit_3.dateTime().toString("yyyy-MM-dd HH-mm-ss") + "' AND REGDATE <= '" + self.dateTimeEdit_4.dateTime().toString("yyyy-MM-dd HH-mm-ss") + "'";

        if self.checkBox_8.isChecked() == False: 
            sSelectText += " AND ("
            if self.checkBox_9.isChecked() == True: sSelectText += "class = 1 OR "
            if self.checkBox_10.isChecked(): sSelectText += "class = 2 OR "
            if self.checkBox_11.isChecked() == True:  sSelectText += "class = 3 OR "
            if self.checkBox_12.isChecked() == True:  sSelectText += "class = 4 OR "
            if self.checkBox_13.isChecked() == True:  sSelectText += "class = 5 OR "
            if self.checkBox_14.isChecked() == True:  sSelectText += "class = 6 OR"       
            sSelectText = sSelectText.rstrip(" ")       
            sSelectText = sSelectText.rstrip("OR")        
            sSelectText += ")"
        else:
            sSelectText += "OR"
            sSelectText = sSelectText.rstrip("OR")

        sSelectText += " order by REGDATE DESC "
        sSelectText += "limit 1000 "           

        MysqlClass.DB_Select(MysqlClass, sSelectText)

        count = len(Select_data)
    
        #갯수만큼 테이블의 Row를 생성한다.
        self.tableView_Search_3.setRowCount(count)
    
        #row 리스트만큼 반복하며 Table에 DB 값을 넣는다.
        for x in range(count):
            #리스트 내부의 column쌍은 튜플로 반환하므로 튜플의 각 값을 변수에 저장
            idx, className, regtime, set_pm25, set_pm10, pm25, pm10 = Select_data[x]
           
            #테이블의 각 셀에 값 입력
            self.tableView_Search_3.setItem(x, 0, QtWidgets.QTableWidgetItem(str(regtime)))
            self.tableView_Search_3.setItem(x, 1, QtWidgets.QTableWidgetItem(str(className)))
            self.tableView_Search_3.setItem(x, 2, QtWidgets.QTableWidgetItem(str(pm25)))
            self.tableView_Search_3.setItem(x, 3, QtWidgets.QTableWidgetItem(str(pm10)))    
            self.tableView_Search_3.setItem(x, 4, QtWidgets.QTableWidgetItem(str(set_pm25)))
            self.tableView_Search_3.setItem(x, 5, QtWidgets.QTableWidgetItem(str(set_pm10)))        
    def ConfigData_Read(self):
        sSelectText = "SELECT `after_pm2.5`, `after_pm10` from operation_list order by class asc"
        MysqlClass.DB_Select(MysqlClass, sSelectText)
        global alarm_config

        count = len(Select_data)
        alarm_config =[]
        alarm_config = Select_data  
    def setTable(self):
        #Table 가로(column) 갯수
        self.tableView_Search.setColumnCount(4)
        self.tableView_Search_2.setColumnCount(3)
        self.tableView_Search_3.setColumnCount(6)
        
        #Table 칼럼 헤더 라벨
        self.tableView_Search.setHorizontalHeaderLabels(['시간','교실','초미세먼지','미세먼지'])
        self.tableView_Search_2.setHorizontalHeaderLabels(['교실','초미세먼지 설정값','미세먼지 설정값'])
        self.tableView_Search_3.setHorizontalHeaderLabels(['발생시간','교실','초미세먼지','미세먼지','초미세먼지 설정값','미세먼지 설정값'])

        self.tableView_Search.setColumnWidth(0,170)

        self.tableView_Search_2.setColumnWidth(0,50)
        self.tableView_Search_2.setColumnWidth(1,130)
        self.tableView_Search_2.setColumnWidth(2,130)

        self.tableView_Search_3.setColumnWidth(0,200)
        self.tableView_Search_3.setColumnWidth(1,50)
        self.tableView_Search_3.setColumnWidth(4,150)
        self.tableView_Search_3.setColumnWidth(5,150)        
    def setConfigTable(self):
        
        Oper_Query = "SELECT * FROM OPERATION_LIST "
        MysqlClass.DB_Select(MysqlClass, Oper_Query)    
        count = len(Select_data)
        #갯수만큼 테이블의 Row를 생성한다.
        self.tableView_Search_2.setRowCount(count)
    
        #row 리스트만큼 반복하며 Table에 DB 값을 넣는다.
        for x in range(count):
            #리스트 내부의 column쌍은 튜플로 반환하므로 튜플의 각 값을 변수에 저장
            idx, className,regdate, bf_pm25, bf_pm10, af_pm25, af_pm10 = Select_data[x]
           
            #테이블의 각 셀에 값 입력
            self.tableView_Search_2.setItem(x, 0, QtWidgets.QTableWidgetItem(str(className)))
            self.tableView_Search_2.setItem(x, 1, QtWidgets.QTableWidgetItem(str(af_pm25)))
            self.tableView_Search_2.setItem(x, 2, QtWidgets.QTableWidgetItem(str(af_pm10)))    
    def Chart_init(self):
        import time
        time_data = int(time.time())

        LegPM25 = self.graphicsView.addLegend(offset=(760,10)) # LegendItem() 없으면, 생성후 반환 ; 매개변수는 LegendItem() 에서 사용 ==> size=(width,height)
        LegPM10 = self.graphicsView_2.addLegend(offset=(760,10)) # LegendItem() 없으면, 생성후 반환 ; 매개변수는 LegendItem() 에서 사용 ==> size=(width,height)
        

        self.pdi_PM25class1 = self.graphicsView.plot(pen=(1,3), symbol='x', symbolPen=(1,3), symbolBrush=0.2, name='class1') # PlotDataItem obj 반환.
        self.pdi_PM25class2 = self.graphicsView.plot(pen=(2,3), symbol='o', symbolPen=(2,3), symbolBrush=0.2, name='class2') # PlotDataItem obj 반환.
        self.pdi_PM25class3 = self.graphicsView.plot(pen=(3,3), symbol='x', symbolPen=(3,3), symbolBrush=0.2, name='class3') # PlotDataItem obj 반환.
        self.pdi_PM25class4 = self.graphicsView.plot(pen=(1,4), symbol='o', symbolPen=(1,4), symbolBrush=0.2, name='class4') # PlotDataItem obj 반환.
        self.pdi_PM25class5 = self.graphicsView.plot(pen=(2,4), symbol='x', symbolPen=(2,4), symbolBrush=0.2, name='class5') # PlotDataItem obj 반환.
        self.pdi_PM25class6 = self.graphicsView.plot(pen=(3,4), symbol='o', symbolPen=(3,4), symbolBrush=0.2, name='class6') # PlotDataItem obj 반환.
        self.plotData_PM25class1 = {'x': [], 'y': []}
        self.plotData_PM25class2 = {'x': [], 'y': []}
        self.plotData_PM25class3 = {'x': [], 'y': []}
        self.plotData_PM25class4 = {'x': [], 'y': []}
        self.plotData_PM25class5 = {'x': [], 'y': []}
        self.plotData_PM25class6 = {'x': [], 'y': []}

        self.pdi_PM10class1 = self.graphicsView_2.plot(pen=(1,3), symbol='x', symbolPen=(1,3), symbolBrush=0.2, name='class1') # PlotDataItem obj 반환.
        self.pdi_PM10class2 = self.graphicsView_2.plot(pen=(2,3), symbol='o', symbolPen=(2,3), symbolBrush=0.2, name='class2') # PlotDataItem obj 반환.
        self.pdi_PM10class3 = self.graphicsView_2.plot(pen=(3,3), symbol='x', symbolPen=(3,3), symbolBrush=0.2, name='class3') # PlotDataItem obj 반환.
        self.pdi_PM10class4 = self.graphicsView_2.plot(pen=(1,4), symbol='o', symbolPen=(1,4), symbolBrush=0.2, name='class4') # PlotDataItem obj 반환.
        self.pdi_PM10class5 = self.graphicsView_2.plot(pen=(2,4), symbol='x', symbolPen=(2,4), symbolBrush=0.2, name='class5') # PlotDataItem obj 반환.
        self.pdi_PM10class6 = self.graphicsView_2.plot(pen=(3,4), symbol='o', symbolPen=(3,4), symbolBrush=0.2, name='class6') # PlotDataItem obj 반환.
        self.plotData_PM10class1 = {'x': [], 'y': []}
        self.plotData_PM10class2 = {'x': [], 'y': []}
        self.plotData_PM10class3 = {'x': [], 'y': []}
        self.plotData_PM10class4 = {'x': [], 'y': []}
        self.plotData_PM10class5 = {'x': [], 'y': []}
        self.plotData_PM10class6 = {'x': [], 'y': []}

        self.graphicsView.setBackground('#FFFFFF')
        self.graphicsView.setXRange(time_data-10, time_data+1 )
        self.graphicsView.showGrid(x=True, y=True) 

        self.graphicsView_2.setBackground('#FFFFFF')     
        self.graphicsView_2.setXRange(time_data-10, time_data+1 )
        self.graphicsView_2.showGrid(x=True, y=True)          
    def update_plot(self, new_time_data: int): 
        data_sec = time.strftime("%S", time.localtime(new_time_data))

        """for i in range(2):
            for j in range(6):
                self.plotData_Class[i][j]['y'].append((regs_PM25[j*2])) 
                self.plotData_Class[i][j]['x'].append(new_time_data) 
                self.pdi_Class[i][j].setData(self.plotData_Class[i][j]['x'], self.plotData_Class[i][j]['y'])
                """
        
        self.plotData_PM25class1['y'].append(regs_PM25[0])
        self.plotData_PM25class2['y'].append(regs_PM25[2])
        self.plotData_PM25class3['y'].append(regs_PM25[4])
        self.plotData_PM25class4['y'].append(regs_PM25[6])
        self.plotData_PM25class5['y'].append(regs_PM25[8])
        self.plotData_PM25class6['y'].append(regs_PM25[10])
        self.plotData_PM25class1['x'].append(new_time_data)
        self.plotData_PM25class2['x'].append(new_time_data)
        self.plotData_PM25class3['x'].append(new_time_data)
        self.plotData_PM25class4['x'].append(new_time_data)
        self.plotData_PM25class5['x'].append(new_time_data)
        self.plotData_PM25class6['x'].append(new_time_data)

        self.plotData_PM10class1['y'].append(regs_PM10[0])
        self.plotData_PM10class2['y'].append(regs_PM10[2])
        self.plotData_PM10class3['y'].append(regs_PM10[4])
        self.plotData_PM10class4['y'].append(regs_PM10[6])
        self.plotData_PM10class5['y'].append(regs_PM10[8])
        self.plotData_PM10class6['y'].append(regs_PM10[10])
        self.plotData_PM10class1['x'].append(new_time_data) 
        self.plotData_PM10class2['x'].append(new_time_data) 
        self.plotData_PM10class3['x'].append(new_time_data) 
        self.plotData_PM10class4['x'].append(new_time_data) 
        self.plotData_PM10class5['x'].append(new_time_data) 
        self.plotData_PM10class6['x'].append(new_time_data) 


        self.graphicsView.setXRange(new_time_data - 10, new_time_data + 1, padding=0) # 항상 x축 시간을 최근 범위만 보여줌. 
        self.graphicsView_2.setXRange(new_time_data - 10, new_time_data + 1, padding=0) # 항상 x축 시간을 최근 범위만 보여줌. 
        #self.pdi.setData(self.plotData['x'], self.plotData['y'])
        #self.pdi3.setData(self.plotData3['x'], self.plotData3['y'])
        #self.pdi2.setData(self.plotData2['x'], self.plotData2['y'])
        #self.graphicsView.setYRange(regs_PM25[0]-1, regs_PM25[10]+1, padding=0)
        #self.graphicsView_2.setYRange(regs_PM10[0]-1, regs_PM10[10]+1, padding=0)
        if self.checkBox_21.isChecked():
            self.pdi_PM25class1.setData(self.plotData_PM25class1['x'], self.plotData_PM25class1['y'])
            self.pdi_PM25class2.setData(self.plotData_PM25class2['x'], self.plotData_PM25class2['y'])
            self.pdi_PM25class3.setData(self.plotData_PM25class3['x'], self.plotData_PM25class3['y'])
            self.pdi_PM25class4.setData(self.plotData_PM25class4['x'], self.plotData_PM25class4['y'])
            self.pdi_PM25class5.setData(self.plotData_PM25class5['x'], self.plotData_PM25class5['y'])
            self.pdi_PM25class6.setData(self.plotData_PM25class6['x'], self.plotData_PM25class6['y'])
        
            self.pdi_PM10class1.setData(self.plotData_PM10class1['x'], self.plotData_PM10class1['y'])
            self.pdi_PM10class2.setData(self.plotData_PM10class2['x'], self.plotData_PM10class2['y'])
            self.pdi_PM10class3.setData(self.plotData_PM10class3['x'], self.plotData_PM10class3['y'])
            self.pdi_PM10class4.setData(self.plotData_PM10class4['x'], self.plotData_PM10class4['y'])
            self.pdi_PM10class5.setData(self.plotData_PM10class5['x'], self.plotData_PM10class5['y'])
            self.pdi_PM10class6.setData(self.plotData_PM10class6['x'], self.plotData_PM10class6['y'])
        else:
            if self.checkBox_17.isChecked():
                self.pdi_PM25class1.setData(self.plotData_PM25class1['x'], self.plotData_PM25class1['y'])
                self.pdi_PM10class1.setData(self.plotData_PM10class1['x'], self.plotData_PM10class1['y'])
            if self.checkBox_16.isChecked():
                self.pdi_PM25class2.setData(self.plotData_PM25class2['x'], self.plotData_PM25class2['y'])
                self.pdi_PM10class2.setData(self.plotData_PM10class2['x'], self.plotData_PM10class2['y'])
            if self.checkBox_19.isChecked():
                self.pdi_PM25class3.setData(self.plotData_PM25class3['x'], self.plotData_PM25class3['y'])
                self.pdi_PM10class3.setData(self.plotData_PM10class3['x'], self.plotData_PM10class3['y'])
            if self.checkBox_15.isChecked():
                self.pdi_PM25class4.setData(self.plotData_PM25class4['x'], self.plotData_PM25class4['y'])
                self.pdi_PM10class4.setData(self.plotData_PM10class4['x'], self.plotData_PM10class4['y'])
            if self.checkBox_18.isChecked():
                self.pdi_PM25class5.setData(self.plotData_PM25class5['x'], self.plotData_PM25class5['y'])
                self.pdi_PM10class5.setData(self.plotData_PM10class5['x'], self.plotData_PM10class5['y'])
            if self.checkBox_20.isChecked():
                self.pdi_PM25class6.setData(self.plotData_PM25class6['x'], self.plotData_PM25class6['y'])
                self.pdi_PM10class6.setData(self.plotData_PM10class6['x'], self.plotData_PM10class6['y'])
    def AlarmStatus_Refresh(self):      
        
        if b_Alarm[0] == True:            
            ui.Class1Alarm_PM25.setVisible(True)
        else: 
            ui.Class1Alarm_PM25.setVisible(False)
        if b_Alarm[1] == True: 
            ui.Class2Alarm_PM25.setVisible(True)
        else: 
            ui.Class2Alarm_PM25.setVisible(False)    
        if b_Alarm[2] == True: 
            ui.Class3Alarm_PM25.setVisible(True)
        else: 
            ui.Class3Alarm_PM25.setVisible(False)

        if b_Alarm[3] == True: 
            ui.Class4Alarm_PM25.setVisible(True)
        else:
            ui.Class4Alarm_PM25.setVisible(False)    
        if b_Alarm[4] == True: 
            ui.Class5Alarm_PM25.setVisible(True)
        else: 
            ui.Class5Alarm_PM25.setVisible(False)

        if b_Alarm[5] == True: 
            ui.Class6Alarm_PM25.setVisible(True)
        else:
            ui.Class6Alarm_PM25.setVisible(False)
            
        if b_Alarm2[0] == True: 
            ui.Class1Alarm_PM10.setVisible(True)
        else: 
            ui.Class1Alarm_PM10.setVisible(False)
        if b_Alarm2[1] == True: 
            ui.Class2Alarm_PM10.setVisible(True)
        else: 
            ui.Class2Alarm_PM10.setVisible(False)    
        if b_Alarm2[2] == True: 
            ui.Class3Alarm_PM10.setVisible(True)
        else: 
            ui.Class3Alarm_PM10.setVisible(False)

        if b_Alarm2[3] == True: 
            ui.Class4Alarm_PM10.setVisible(True)
        else:
            ui.Class4Alarm_PM10.setVisible(False)    
        if b_Alarm2[4] == True: 
            ui.Class5Alarm_PM10.setVisible(True)
        else: 
            ui.Class5Alarm_PM10.setVisible(False)

        if b_Alarm2[5] == True: 
            ui.Class6Alarm_PM10.setVisible(True)
        else:
            ui.Class6Alarm_PM10.setVisible(False)    
        
class MysqlClass():

    def DB_Select(self, sSelectText):
        conn = mariadb.connect(
        user="root",
        password="1111",
        host="localhost",
        database="manage")
        cur = conn.cursor()
        global Select_data
        try:     
            cur.execute(sSelectText) 
            Select_data = cur.fetchall()
        except mariadb.Error as e: 
            print(f"Error: {e}")
            return False
        #Select_Data = cur.fetchall()
        #conn.commit()  
        conn.close()

    def DB_Insert(self):
        conn = mariadb.connect(
        user="root",
        password="1111",
        host="localhost",
        database="manage")
        cur = conn.cursor()
        var_time = time.strftime('%y_%m')
        var_time2 = time.strftime('%y-%m-%d-%H-%M-%S')

        for n in range(6):
            str_Insert = "INSERT INTO sensor_data_#date VALUES (null,#class,#time2,#pm25,#pm10)"
            str_Insert = str_Insert.replace("#date", var_time)
            str_Insert = str_Insert.replace('#time2', "now()")
            str_Insert = str_Insert.replace('#class', str(n+1))
            if len(regs_PM25) != 0: 
                str_Insert = str_Insert.replace('#pm25', str(regs_PM25[n*2]))
                if regs_PM25[n*2] > alarm_config[n][0] and b_Alarm[n] == False:
                    str_alarmInsert = "INSERT INTO alarm_list VALUES (null,#class,#time2,#set_pm25,#set_pm10,#pm25,#pm10)"
                    str_alarmInsert = str_alarmInsert.replace("#date", var_time)
                    str_alarmInsert = str_alarmInsert.replace('#time2', "now()")
                    str_alarmInsert = str_alarmInsert.replace('#class', str(n+1))
                    str_alarmInsert = str_alarmInsert.replace('#set_pm25', str(alarm_config[n][0]))
                    str_alarmInsert = str_alarmInsert.replace('#set_pm10', str(alarm_config[n][1]))
                    str_alarmInsert = str_alarmInsert.replace('#pm25', str(regs_PM25[n*2]))
                    str_alarmInsert = str_alarmInsert.replace('#pm10', str(regs_PM10[n*2]))
                    try:
                        cur.execute(str_alarmInsert)
                        b_Alarm[n] = True
                    except mariadb.Error as e:
                        print(f"Error: {e}")
                        return False
                elif regs_PM25[n*2] < alarm_config[n][0] and b_Alarm[n] == True:
                    b_Alarm[n] = False

            if len(regs_PM10) != 0: 
                str_Insert = str_Insert.replace('#pm10', str(regs_PM10[n*2]))
                if regs_PM10[n*2] > alarm_config[n][1] and b_Alarm2[n] == False:
                    str_alarmInsert = "INSERT INTO alarm_list VALUES (null,#class,#time2,#set_pm25,#set_pm10,#pm25,#pm10)"
                    str_alarmInsert = str_alarmInsert.replace("#date", var_time)
                    str_alarmInsert = str_alarmInsert.replace('#time2', "now()")
                    str_alarmInsert = str_alarmInsert.replace('#class', str(n+1))
                    str_alarmInsert = str_alarmInsert.replace('#set_pm25', str(alarm_config[n][0]))
                    str_alarmInsert = str_alarmInsert.replace('#set_pm10', str(alarm_config[n][1]))
                    str_alarmInsert = str_alarmInsert.replace('#pm25', str(regs_PM25[n*2]))
                    str_alarmInsert = str_alarmInsert.replace('#pm10', str(regs_PM10[n*2]))
                    try:
                        cur.execute(str_alarmInsert)
                        b_Alarm2[n] = True
                    except mariadb.Error as e:
                        print(f"Error: {e}")
                        return False
                elif regs_PM10[n*2] < alarm_config[n][1] and b_Alarm2[n] == True:
                    b_Alarm2[n] = False
            try:
                cur.execute(str_Insert)
            except mariadb.Error as e:
                print(f"Error: {e}")
                return False
  
        conn.commit()
        print(f"Last Inserted ID: {cur.lastrowid}")
    
        conn.close()

        Ui_MainWindow.AlarmStatus_Refresh(Ui_MainWindow)

    def DB_Insert_Config():
        conn = mariadb.connect(
        user="root",
        password="1111",
        host="localhost",
        database="manage")
        cur = conn.cursor()
        var_time = time.strftime('%y_%m')
        var_time2 = time.strftime('%y-%m-%d-%H-%M-%S')

        for n in range(6):
            str_Insert = "update operation_list set `regdate` = #regdate, `after_pm2.5` = '#after_pm2.5' , `after_pm10` = '#after_pm10'" + " where class = '#class'";
                
            str_Insert = str_Insert.replace('#regdate', "now()")
            str_Insert = str_Insert.replace('#class', str(n+1))
            str_Insert = str_Insert.replace('#after_pm2.5', str(ui.tableView_Search_2.item(n,1).text()))           
            str_Insert = str_Insert.replace('#after_pm10', str(ui.tableView_Search_2.item(n,2).text()))
            try:
                cur.execute(str_Insert)
            except mariadb.Error as e:
                print(f"Error: {e}")
                return False
        conn.commit()
        print(f"Last Inserted ID: {cur.lastrowid}")
    
        conn.close()

class TimeAxisItem(pg.AxisItem): 
    def __init__(self, *args, **kwargs): 
        super().__init__(*args, **kwargs) 
        self.setLabel(text='Time(초)', units=None) 
        self.enableAutoSIPrefix(False) 

    def tickStrings(self, values, scale, spacing): 
        """ override 하여, tick 옆에 써지는 문자를 원하는대로 수정함. 
        values --> x축 값들 ; 숫자로 이루어진 Itarable data --> ex) List[int] """ 
        # print("--tickStrings valuse ==>", values) 
        return [time.strftime("%H:%M:%S", time.localtime(local_time)) for local_time in values]

if __name__ == "__main__":
    import sys, sched
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    regs_PM25 =[]
    regs_PM10 =[]
    b_Alarm =[False, False, False, False, False, False]
    b_Alarm2 =[False, False, False, False, False, False]
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.ConfigData_Read()
    ui.Read_Register()
    ui.Read_Register_PM10()
    ui.setTable()
    ui.setConfigTable()
    tp = Thread(target=ui.Thread_DB_Inset)
        # set daemon: polling thread will exit if main thread exit
    tp.daemon = True
    tp.start()
    #ui.Chart_init()
    tp2 = Thread(target=ui.Chart_init)
        # set daemon: polling thread will exit if main thread exit
    tp2.daemon = True
    tp2.start()

    def get_data(): 
        new_time_data = int(time.time()) 
        ui.update_plot(new_time_data) 

    mytimer = QTimer() 
    mytimer.start(1000) # 1초마다 갱신 위함... 
    mytimer.timeout.connect(get_data)


    sys.exit(app.exec_())

